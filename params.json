{"name":"Bomberman","tagline":"","body":"Introdução\r\n==========\r\n\r\nimage:https://travis-ci.org/gabrielsr/bomberman.svg?branch=master[\"Build Status\", link=\"https://travis-ci.org/gabrielsr/bomberman\"]\r\nimage:http://img.shields.io/coveralls/gabrielsr/bomberman/master.svg[\"Coverage Status\", link=\"https://coveralls.io/r/gabrielsr/bomberman?branch=master\"]\r\n\r\n\r\nProjeto em Desenvolvimento de um Bomberman clone utilizando programação modular, \r\ndesenvolvido como projeto da disciplina:\r\n\r\nProgramação Sistemática\r\n\r\nUniversidade de Brasília - UnB\r\n\r\n2/2014\r\n\r\n\r\n\r\n= Instruções para Montagem de Ambiente de Desenvolvimento\r\n\r\n== JDK8 o compilador e máquina virtual\r\n\r\nInstale o JDK8: \r\n\thttp://www.oracle.com/technetwork/java/javase/downloads/index.html\r\n\r\n\t\r\n== Eclipse (Luna) a IDE\r\n\thttp://eclipse.org/downloads/packages/eclipse-standard-44/lunar\r\n\r\n\t\r\n== Gradle a Ferramenta de Gerencia de Dependências e Build\t\r\n\r\nGradle é um sitema de gerencia de dependência. Iremos utiliza-lo para obter a o JUnit \r\ninicialmente depois iremos incrementar com outras bibliotecas.\r\n\r\n\r\n=== Gradle Eclipse plugin\r\n\r\nO plugin gradle do eclipse facilitar a montarmos o projeto, pois inclui as dependencias configurados no gradle diretamente na interface\r\n\r\nNo Eclipse vá em  \r\n> Help>Marketplace \r\n\r\nDigite no campo search:\r\n Gradle Integration\r\n\r\nEscolha  Gradle Integration for Eclipse (4.4) 3.6.0.RELEASE\r\n\r\nConfirme. Ao final da instalação reinicie o Eclipse.\r\n\r\n\r\n== Importanto o projeto no Eclipse\r\n\r\nGo to File -> Import -> Gradle -> Gradle Project, navega até a pasta root deste projeto. Selecione [Build Model]\r\n\r\nOBS: a importação pode demorar vários minutos na primeira vez que for realiza pois será realizado download \r\ndas dependências do Gradle.\r\n\r\nApós a conclusão da importação você deverá visualizar o projeto assim: \r\n\r\n[[img-eclipse_pacotes]]\r\n.Visualização de Pacotes após importação bem sucedida no Eclipse\r\nimage::/docs/img/eclipse_pacotes.png[]\r\n\r\nTIP: Caso o eclipse esteja exibindo o projeto diferente disso provavelmente aconteceu um erro na importação. \r\nTente novamente.\r\n\r\n=== Compilando no Eclipse\r\n\r\nO mais comum é trabalhar no Eclipse com compilação automática de código, o que quer dizer que a medida que você digita \r\nnovas linhas em classes já existentes ou cria novas classes o Eclipse automaticamente compila para você exibe os erros\r\npróximos as linhas em que ocorreram como sinais vermelhos. Ao posicionar o cursor próximo aos erros é exibido um\r\ndetalhamento do problema.\r\n\r\nPara verificar se o Eclipse está configurado para realizar build automático vá ao menu _Project_ -> _Build Automatically_.\r\n\r\n\r\n=== Outros plugins\r\n\r\n=== Checkstyle Eclipse plugin\r\n\r\n\r\nNo Eclipse vá em  \r\n> Help>Marketplace \r\n\r\nDigite no campo search:\r\n Checkstyle\r\n \r\nEscolha  Checkstyle Plug-in 5.7.0\r\nConfirme. Ao final da instalação reinicie o Eclipse.\r\n\r\nFoi criado um uma regra customizada para atender nossas demandas atuais de limpeza de código,\r\ncustom_checks_bomberman.xml, que se encontra no diretório raiz do projeto.\r\n\r\nPara usá-la no Eclipse, deve-se baixar o plugin do checkstyle (disponível na marketplace),\r\nir em Eclipse >> Preferências >> Checkstyle >> New\r\n\r\nNa Tela que vai aparecer, dê um nome qualquer para esse conjunto de regras (sugiro o nome abaixo), \r\nclique em import e selecione o arquivo custom_checks_bomberman.xml\r\n \r\n[[img-checkstyle_import]]\r\n.Tela de importação das regras customizadas\r\nimage::/docs/img/checkstyle_import.png[]\r\n\r\nAo voltar para a página de configuração do checkstyle, clique na regra customiada e em seguida em \"Set as Default\"\r\n\r\n\r\n=== Findbugs plugin\r\n\r\nNo Eclipse vá em  \r\n> Help>Marketplace \r\n\r\nDigite no campo search:\r\n Findbugs\r\n \r\nEscolha  Findbugs Eclipse Plugin 3.0.0\r\nConfirme. Ao final da instalação reinicie o Eclipse.\r\n\r\n\r\n\r\n== Integração Contínua & Cobertura dos testes\r\n\r\nA cada push para o repositório, é feito um build completo do projeto, executando os testes e verificando se as \r\nmodificações inseriram alguma falta ou quebraram algum teste.\r\n\r\nPara verificar o status das últimas construções, entre no link: \r\n\thttps://travis-ci.org/gabrielsr/bomberman/builds\r\n\t\r\nAlém disso, após o build é feita uma análise da cobertura dos testes, usando as ferramentas \r\nhttp://cobertura.github.io/cobertura/[Cobertura] e http://www.eclemma.org/jacoco/[Jacoco]. \r\nPara ver os resultados dos últimos testes, entre no link:\r\n\thttps://coveralls.io/r/gabrielsr/bomberman\r\n\r\n\r\n\r\n= Referencias \r\n== Padrões Utilizados\r\n* Padrão Arquitetural: Entity Component System\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}